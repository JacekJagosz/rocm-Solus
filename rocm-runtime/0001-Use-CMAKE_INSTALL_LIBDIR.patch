From eb0a2d6a459863f14677a712cd66ec3a3ef27258 Mon Sep 17 00:00:00 2001
From: Jeremy Newton <Jeremy.Newton@amd.com>
Date: Mon, 17 Jan 2022 11:17:18 -0500
Subject: [PATCH] Use CMAKE_INSTALL_LIBDIR

Instead of installing to lib, use CMAKE_INSTALL_LIBDIR to allow the
cmake to detect or builder to choose.

Signed-off-by: Jeremy Newton <Jeremy.Newton@amd.com>
---
 src/CMakeLists.txt | 24 ++++++++++--------------
 1 file changed, 10 insertions(+), 14 deletions(-)

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 8fb02b1..4b35ae5 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -275,7 +275,7 @@ if( NOT ${BUILD_SHARED_LIBS} )
 
   ## Bind to source build target interface but not its link requirements.
   target_include_directories( ${CORE_RUNTIME_NAME} INTERFACE $<TARGET_PROPERTY:${CORE_RUNTIME_NAME}::${CORE_RUNTIME_TARGET},INTERFACE_INCLUDE_DIRECTORIES> )
-  target_link_libraries ( ${CORE_RUNTIME_NAME} INTERFACE -Wl,$<INSTALL_PREFIX>/lib/cmake/${CORE_RUNTIME_NAME}/${LNKSCR}
+  target_link_libraries ( ${CORE_RUNTIME_NAME} INTERFACE -Wl,$<INSTALL_PREFIX>/${CMAKE_INSTALL_LIBDIR}/cmake/${CORE_RUNTIME_NAME}/${LNKSCR}
     -Wl,--whole-archive $<TARGET_FILE:${CORE_RUNTIME_NAME}::${CORE_RUNTIME_TARGET}> -Wl,--no-whole-archive)
   add_dependencies( ${CORE_RUNTIME_NAME} ${CORE_RUNTIME_TARGET} )
 
@@ -289,16 +289,15 @@ endif()
 ## Create symlinks for legacy packaging and install
 add_custom_target ( hsa_include_link ALL WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMAND ${CMAKE_COMMAND} -E create_symlink ../../include/hsa hsa_include_link )
 if ( ${BUILD_SHARED_LIBS} )
-    add_custom_target ( hsa_lib_link ALL WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMAND ${CMAKE_COMMAND} -E create_symlink ../../lib/${CORE_RUNTIME_LIBRARY}.so ${CORE_RUNTIME_LIBRARY}-link.so )
-    add_custom_target ( hsa_lib_link2 ALL WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMAND ${CMAKE_COMMAND} -E create_symlink ../../lib/${CORE_RUNTIME_LIBRARY}.so.${VERSION_MAJOR} ${CORE_RUNTIME_LIBRARY}-link.so.${VERSION_MAJOR} )
+    add_custom_target ( hsa_lib_link ALL WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMAND ${CMAKE_COMMAND} -E create_symlink ../../${CMAKE_INSTALL_LIBDIR}/${CORE_RUNTIME_LIBRARY}.so ${CORE_RUNTIME_LIBRARY}-link.so )
+    add_custom_target ( hsa_lib_link2 ALL WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMAND ${CMAKE_COMMAND} -E create_symlink ../../${CMAKE_INSTALL_LIBDIR}/${CORE_RUNTIME_LIBRARY}.so.${VERSION_MAJOR} ${CORE_RUNTIME_LIBRARY}-link.so.${VERSION_MAJOR} )
 endif()
 
 ## Set install information
 # Installs binaries and exports the library usage data to ${HSAKMT_TARGET}Targets
-# TODO: Fix me for flat directory layout.  Should be ${CMAKE_INSTALL_LIBDIR}
 install ( TARGETS ${CORE_RUNTIME_TARGET} EXPORT ${CORE_RUNTIME_NAME}Targets
-  ARCHIVE DESTINATION lib COMPONENT binary
-  LIBRARY DESTINATION lib COMPONENT binary )
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT binary
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT binary )
 
 # Install license
 install ( FILES ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.md DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT binary )
@@ -318,11 +317,10 @@ endif ()
 
 ## Configure and install package config file
 # Record our usage data for clients find_package calls.
-# TODO: Fix me for flat directory layout.  Should be ${CMAKE_INSTALL_LIBDIR}
 install ( EXPORT ${CORE_RUNTIME_NAME}Targets
   FILE ${CORE_RUNTIME_NAME}Targets.cmake
   NAMESPACE ${CORE_RUNTIME_NAME}::
-  DESTINATION lib/cmake/${CORE_RUNTIME_NAME}
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${CORE_RUNTIME_NAME}
   COMPONENT dev)
 
 # Adds the target alias hsa-runtime64::hsa-runtime64 to the local cmake cache.
@@ -336,28 +334,26 @@ add_library( ${CORE_RUNTIME_NAME}::${CORE_RUNTIME_NAME} ALIAS ${CORE_RUNTIME_NAM
 # Create cmake configuration files
 include(CMakePackageConfigHelpers)
 
-# TODO: Fix me for flat directory layout.  Should be ${CMAKE_INSTALL_LIBDIR}
 configure_package_config_file(${CORE_RUNTIME_NAME}-config.cmake.in
   ${CORE_RUNTIME_NAME}-config.cmake
-  INSTALL_DESTINATION lib/cmake/${CORE_RUNTIME_NAME} )
+  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${CORE_RUNTIME_NAME} )
 
 write_basic_package_version_file(${CORE_RUNTIME_NAME}-config-version.cmake
   VERSION ${SO_VERSION_STRING} COMPATIBILITY AnyNewerVersion )
 
-# TODO: Fix me for flat directory layout.  Should be ${CMAKE_INSTALL_LIBDIR}
 install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${CORE_RUNTIME_NAME}-config.cmake ${CMAKE_CURRENT_BINARY_DIR}/${CORE_RUNTIME_NAME}-config-version.cmake
-  DESTINATION lib/cmake/${CORE_RUNTIME_NAME}
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${CORE_RUNTIME_NAME}
   COMPONENT dev)
 
 # Install build files needed only when using a static build.
 if( NOT ${BUILD_SHARED_LIBS} )
   # libelf find package module
   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules/FindLibElf.cmake ${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules/COPYING-CMAKE-SCRIPTS
-    DESTINATION lib/cmake/${CORE_RUNTIME_NAME}
+    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${CORE_RUNTIME_NAME}
     COMPONENT dev)
   # Linker script (defines function aliases)
   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${LNKSCR}
-    DESTINATION lib/cmake/${CORE_RUNTIME_NAME}
+    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${CORE_RUNTIME_NAME}
     COMPONENT dev)
 endif()
 
-- 
2.31.1

