From 43d58b7ffdfeae7d5bd36bfd76aff1e46302ca79 Mon Sep 17 00:00:00 2001
From: Jeremy Newton <alexjnewt@hotmail.com>
Date: Wed, 20 Apr 2022 00:24:06 -0400
Subject: [PATCH] Allow ROCclr to be built standalone

The OpenCL sources are still required, but this patch allows ROCclr to
be built, installed, and packaged independently.

Change-Id: Ibe29a76d3a8c4798a0ce5a30f3645a05306d165b
---
 CMakeLists.txt              |  1 +
 cmake/ROCclr.cmake          | 56 +++++++++++++++++++++++++++++++------
 cmake/ROCclrConfig.cmake.in | 12 ++++++++
 cmake/ROCclrHSA.cmake       |  4 +--
 cmake/ROCclrHSAIL.cmake     |  2 +-
 cmake/ROCclrLC.cmake        |  4 +--
 cmake/ROCclrPAL.cmake       |  2 +-
 7 files changed, 67 insertions(+), 14 deletions(-)
 create mode 100644 cmake/ROCclrConfig.cmake.in

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 29ed85f8..e2db2a67 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -24,6 +24,7 @@ project(ROCclr)
 
 if (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
   message(AUTHOR_WARNING "ROCclr is being built as a standalone project. This isn't supported anymore.")
+  set(ROCCLR_STANDALONE ON CACHE STRING "Enable standalone ROCclr")
 endif()
 
 list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
diff --git a/cmake/ROCclr.cmake b/cmake/ROCclr.cmake
index e4d0cdc1..3434d556 100644
--- a/cmake/ROCclr.cmake
+++ b/cmake/ROCclr.cmake
@@ -20,6 +20,12 @@
 
 cmake_minimum_required(VERSION 3.5)
 
+# Set default libdir to be "lib" for ROCm, distros will override this anyway:
+set(CMAKE_INSTALL_LIBDIR "lib" CACHE STRING "Library install directory")
+
+include(GNUInstallDirs)
+include(CMakePackageConfigHelpers)
+
 # ROCclr abstracts the usage of multiple AMD compilers and runtimes.
 # It is possible to support multiple backends concurrently in the same binary.
 option(ROCCLR_ENABLE_HSAIL "Enable support for HSAIL compiler" OFF)
@@ -27,6 +33,9 @@ option(ROCCLR_ENABLE_LC    "Enable support for LC compiler"    ON)
 option(ROCCLR_ENABLE_HSA   "Enable support for HSA runtime"    ON)
 option(ROCCLR_ENABLE_PAL   "Enable support for PAL runtime"    OFF)
 
+# Set to enable install of ROCclr as a standalone library
+option(ROCCLR_STANDALONE "Enable standalone ROCclr" OFF)
+
 if((NOT ROCCLR_ENABLE_HSAIL) AND (NOT ROCCLR_ENABLE_LC))
   message(FATAL "Support for at least one compiler needs to be enabled!")
 endif()
@@ -89,21 +98,18 @@ target_sources(rocclr PRIVATE
   ${ROCCLR_SRC_DIR}/utils/debug.cpp
   ${ROCCLR_SRC_DIR}/utils/flags.cpp)
 
+set(ROCCLR_COMPILE_DEFINITIONS "-DLITTLEENDIAN_CPU;-DWITH_LIQUID_FLASH=0;${AMD_OPENCL_DEFS}")
+
 if(WIN32)
-  target_compile_definitions(rocclr PUBLIC ATI_OS_WIN)
+  string(APPEND ROCCLR_COMPILE_DEFINITIONS ";-DATI_OS_WIN")
 else()
-  target_compile_definitions(rocclr PUBLIC ATI_OS_LINUX)
+  string(APPEND ROCCLR_COMPILE_DEFINITIONS ";-DATI_OS_LINUX")
 endif()
 
 if(NOT CMAKE_CL_64)
-  target_compile_definitions(rocclr PUBLIC ATI_BITS_32)
+  string(APPEND ROCCLR_COMPILE_DEFINITIONS ";-DATI_BITS_32")
 endif()
 
-target_compile_definitions(rocclr PUBLIC
-  LITTLEENDIAN_CPU
-  WITH_LIQUID_FLASH=0
-  ${AMD_OPENCL_DEFS})
-
 target_include_directories(rocclr PUBLIC
   ${ROCCLR_SRC_DIR}
   ${ROCCLR_SRC_DIR}/compiler/lib
@@ -135,3 +141,37 @@ endif()
 if(ROCCLR_ENABLE_PAL)
   include(ROCclrPAL)
 endif()
+
+target_compile_definitions(rocclr PUBLIC ${ROCCLR_COMPILE_DEFINITIONS})
+
+if(ROCCLR_STANDALONE)
+  install( TARGETS rocclr
+    EXPORT rocclr
+    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
+
+  configure_package_config_file(
+    "${ROCCLR_INCLUDE_DIR}/../cmake/ROCclrConfig.cmake.in"
+    "${CMAKE_CURRENT_BINARY_DIR}/ROCclrConfig.cmake"
+    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/rocclr
+    PATH_VARS
+      CMAKE_INSTALL_LIBDIR
+      CMAKE_INSTALL_INCLUDEDIR
+  )
+
+  install(FILES
+    "${CMAKE_CURRENT_BINARY_DIR}/ROCclrConfig.cmake"
+    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/ROCclr")
+
+  install (
+     DIRECTORY
+        "${AMD_OPENCL_INCLUDE_DIR}/../../../../amdocl"
+        "${ROCCLR_INCLUDE_DIR}"
+        "${ROCCLR_INCLUDE_DIR}/../elf"
+        "${ROCCLR_INCLUDE_DIR}/../utils"
+        "${ROCCLR_INCLUDE_DIR}/../platform"
+        "${ROCCLR_INCLUDE_DIR}/../thread"
+        "${ROCCLR_INCLUDE_DIR}/../os"
+        "${ROCCLR_INCLUDE_DIR}/../device"
+     DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/rocclr
+     FILES_MATCHING PATTERN "*.h*")
+endif()
diff --git a/cmake/ROCclrConfig.cmake.in b/cmake/ROCclrConfig.cmake.in
new file mode 100644
index 00000000..5416310b
--- /dev/null
+++ b/cmake/ROCclrConfig.cmake.in
@@ -0,0 +1,12 @@
+@PACKAGE_INIT@
+
+set_and_check( ROCCLR_INCLUDE_DIR "@CMAKE_INSTALL_FULL_INCLUDEDIR@/rocclr" )
+set(ROCCLR_INCLUDE_DIRS
+    ${ROCCLR_INCLUDE_DIR}
+    ${ROCCLR_INCLUDE_DIR}/include
+    ${ROCCLR_INCLUDE_DIR}/amdocl
+    ${ROCCLR_INCLUDE_DIR}/elf )
+set_and_check( ROCCLR_LIB_INSTALL_DIR "@CMAKE_INSTALL_FULL_LIBDIR@" )
+set( ROCCLR_COMPILE_DEFINITIONS "@ROCCLR_COMPILE_DEFINITIONS@" )
+
+check_required_components(ROCclr)
diff --git a/cmake/ROCclrHSA.cmake b/cmake/ROCclrHSA.cmake
index 3104df96..f3056aef 100644
--- a/cmake/ROCclrHSA.cmake
+++ b/cmake/ROCclrHSA.cmake
@@ -29,7 +29,7 @@ target_link_libraries(rocclr PUBLIC hsa-runtime64::hsa-runtime64)
 
 find_package(NUMA)
 if(NUMA_FOUND)
-  target_compile_definitions(rocclr PUBLIC ROCCLR_SUPPORT_NUMA_POLICY)
+  string(APPEND ROCCLR_COMPILE_DEFINITIONS ";-DROCCLR_SUPPORT_NUMA_POLICY")
   target_include_directories(rocclr PUBLIC ${NUMA_INCLUDE_DIR})
   target_link_libraries(rocclr PUBLIC ${NUMA_LIBRARIES})
 endif()
@@ -50,4 +50,4 @@ target_sources(rocclr PRIVATE
   ${ROCCLR_SRC_DIR}/device/rocm/rocvirtual.cpp
   ${ROCCLR_SRC_DIR}/device/rocm/rocurilocator.cpp)
 
-target_compile_definitions(rocclr PUBLIC WITH_HSA_DEVICE)
+string(APPEND ROCCLR_COMPILE_DEFINITIONS ";-DWITH_HSA_DEVICE")
diff --git a/cmake/ROCclrHSAIL.cmake b/cmake/ROCclrHSAIL.cmake
index 24af4841..23b517c4 100644
--- a/cmake/ROCclrHSAIL.cmake
+++ b/cmake/ROCclrHSAIL.cmake
@@ -18,4 +18,4 @@
 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 # THE SOFTWARE.
 
-target_compile_definitions(rocclr PUBLIC WITH_COMPILER_LIB HSAIL_DYN_DLL)
+string(APPEND ROCCLR_COMPILE_DEFINITIONS ";-DWITH_COMPILER_LIB;-DHSAIL_DYN_DLL")
diff --git a/cmake/ROCclrLC.cmake b/cmake/ROCclrLC.cmake
index cb78fa24..2ce1e870 100644
--- a/cmake/ROCclrLC.cmake
+++ b/cmake/ROCclrLC.cmake
@@ -25,8 +25,8 @@ find_package(amd_comgr REQUIRED CONFIG
     cmake/amd_comgr
     lib/cmake/amd_comgr)
 
-target_compile_definitions(rocclr PUBLIC WITH_LIGHTNING_COMPILER USE_COMGR_LIBRARY)
+string(APPEND ROCCLR_COMPILE_DEFINITIONS ";-DWITH_LIGHTNING_COMPILER;-DUSE_COMGR_LIBRARY")
 if(BUILD_SHARED_LIBS)
-  target_compile_definitions(rocclr PUBLIC COMGR_DYN_DLL)
+  string(APPEND ROCCLR_COMPILE_DEFINITIONS ";-DCOMGR_DYN_DLL")
 endif()
 target_link_libraries(rocclr PUBLIC amd_comgr)
diff --git a/cmake/ROCclrPAL.cmake b/cmake/ROCclrPAL.cmake
index 4c0ec032..ec210d4c 100644
--- a/cmake/ROCclrPAL.cmake
+++ b/cmake/ROCclrPAL.cmake
@@ -72,7 +72,7 @@ target_sources(rocclr PRIVATE
   ${ROCCLR_SRC_DIR}/device/pal/paltimestamp.cpp
   ${ROCCLR_SRC_DIR}/device/pal/palvirtual.cpp)
 
-target_compile_definitions(rocclr PUBLIC WITH_PAL_DEVICE PAL_GPUOPEN_OCL)
+string(APPEND ROCCLR_COMPILE_DEFINITIONS ";-DWITH_PAL_DEVICE PAL_GPUOPEN_OCL")
 target_include_directories(rocclr PUBLIC ${AMD_UGL_INCLUDE_DIRS})
 target_link_libraries(rocclr PUBLIC pal amdhsaloader)
 
-- 
2.34.1

