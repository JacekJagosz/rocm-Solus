From bb9696386e92fb38d023f1223ee67cfbd8fa0fa4 Mon Sep 17 00:00:00 2001
From: Jeremy Newton <alexjnewt@hotmail.com>
Date: Mon, 4 Apr 2022 10:39:26 -0400
Subject: [PATCH 2/2] Revert "hip:Switch to component based packaging."

This reverts commit d15357479a32597a8e762796e10dfd1e8afba332.
---
 CMakeLists.txt                   | 103 ++++++++++-
 packaging/CMakeLists.txt         | 297 -------------------------------
 packaging/hip-devel.txt          |  98 ++++++++++
 packaging/hip-doc.txt            |  87 +++++++++
 packaging/hip-runtime-amd.txt    | 109 ++++++++++++
 packaging/hip-runtime-nvidia.txt |  74 ++++++++
 packaging/hip-samples.txt        |  69 +++++++
 7 files changed, 538 insertions(+), 299 deletions(-)
 delete mode 100644 packaging/CMakeLists.txt
 create mode 100644 packaging/hip-devel.txt
 create mode 100644 packaging/hip-doc.txt
 create mode 100644 packaging/hip-runtime-amd.txt
 create mode 100644 packaging/hip-runtime-nvidia.txt
 create mode 100644 packaging/hip-samples.txt

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3ce1fc10..1c5a2e7f 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -397,9 +397,108 @@ install(
     ${CONFIG_PACKAGE_INSTALL_DIR}
     )
 # Packaging invokes UNIX commands, which are not available on Windows.
-
 if(NOT WIN32)
-    add_subdirectory(packaging)
+#############################
+# Packaging steps
+#############################
+# Package: hip_devel
+set(BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/packages/hip-devel)
+configure_file(packaging/hip-devel.txt ${BUILD_DIR}/CMakeLists.txt @ONLY)
+configure_file(packaging/hip-devel.postinst ${BUILD_DIR}/postinst @ONLY)
+configure_file(packaging/hip-devel.prerm ${BUILD_DIR}/prerm @ONLY)
+
+add_custom_target(pkg_hip_base COMMAND ${CMAKE_COMMAND} .
+    COMMAND rm -rf *.deb *.rpm *.tar.gz
+    COMMAND make package
+    COMMAND cp *.deb ${PROJECT_BINARY_DIR}
+    COMMAND cp *.rpm ${PROJECT_BINARY_DIR}
+    COMMAND cp *.tar.gz ${PROJECT_BINARY_DIR}
+    WORKING_DIRECTORY ${BUILD_DIR} )
+
+# Packaging needs to wait for hipify-clang to build if it's enabled...
+if (BUILD_HIPIFY_CLANG)
+    add_dependencies(pkg_hip_base hipify-clang)
+endif()
+
+if(HIP_RUNTIME STREQUAL "rocclr")
+    set(BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/rocclr)
+    configure_file(packaging/hip-runtime-amd.txt ${BUILD_DIR}/CMakeLists.txt @ONLY)
+    configure_file(packaging/hip-runtime-amd.postinst ${BUILD_DIR}/postinst @ONLY)
+    configure_file(packaging/hip-runtime-amd.prerm ${BUILD_DIR}/prerm @ONLY)
+    add_custom_target(hip_on_rocclr COMMAND ${CMAKE_COMMAND} .
+        COMMAND rm -rf *.deb *.rpm *.tar.gz
+        COMMAND make package
+        COMMAND cp *.deb ${PROJECT_BINARY_DIR}
+        COMMAND cp *.rpm ${PROJECT_BINARY_DIR}
+        COMMAND cp *.tar.gz ${PROJECT_BINARY_DIR}
+        WORKING_DIRECTORY ${BUILD_DIR} )
+endif()
+
+# Package: hip_runtime_nvidia
+set(BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/packages/hip-runtime-nvidia)
+configure_file(packaging/hip-runtime-nvidia.txt ${BUILD_DIR}/CMakeLists.txt @ONLY)
+configure_file(packaging/hip-runtime-nvidia.postinst ${BUILD_DIR}/postinst @ONLY)
+configure_file(packaging/hip-runtime-nvidia.prerm ${BUILD_DIR}/prerm @ONLY)
+add_custom_target(pkg_hip_nvcc COMMAND ${CMAKE_COMMAND} .
+    COMMAND rm -rf *.deb *.rpm *.tar.gz
+    COMMAND make package
+    COMMAND cp *.deb ${PROJECT_BINARY_DIR}
+    COMMAND cp *.rpm ${PROJECT_BINARY_DIR}
+    COMMAND cp *.tar.gz ${PROJECT_BINARY_DIR}
+    WORKING_DIRECTORY ${BUILD_DIR})
+
+# Package: hip_doc
+set(BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/packages/hip-doc)
+configure_file(packaging/hip-doc.txt ${BUILD_DIR}/CMakeLists.txt @ONLY)
+add_custom_target(pkg_hip_doc  COMMAND ${CMAKE_COMMAND} .
+    COMMAND rm -rf *.deb *.rpm *.tar.gz
+    COMMAND make package
+    COMMAND cp *.deb ${PROJECT_BINARY_DIR}
+    COMMAND cp *.rpm ${PROJECT_BINARY_DIR}
+    COMMAND cp *.tar.gz ${PROJECT_BINARY_DIR}
+    WORKING_DIRECTORY ${BUILD_DIR})
+
+# Package: hip_catch_tests
+set(BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/packages/hip_catch_tests)
+configure_file(packaging/hip-tests.txt ${BUILD_DIR}/CMakeLists.txt @ONLY)
+add_custom_target(pkg_hip_catch_tests COMMAND ${CMAKE_COMMAND} .
+    COMMAND rm -rf *.deb *.rpm *.tar.gz
+    COMMAND make package
+    COMMAND cp *.deb ${PROJECT_BINARY_DIR}
+    COMMAND cp *.rpm ${PROJECT_BINARY_DIR}
+    COMMAND cp *.tar.gz ${PROJECT_BINARY_DIR}
+    WORKING_DIRECTORY ${BUILD_DIR})
+
+# Package: hip_samples
+set(BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/packages/hip_samples)
+configure_file(packaging/hip-samples.txt ${BUILD_DIR}/CMakeLists.txt @ONLY)
+add_custom_target(pkg_hip_samples COMMAND ${CMAKE_COMMAND} .
+    COMMAND rm -rf *.deb *.rpm *.tar.gz
+    COMMAND make package
+    COMMAND cp *.deb ${PROJECT_BINARY_DIR}
+    COMMAND cp *.rpm ${PROJECT_BINARY_DIR}
+    COMMAND cp *.tar.gz ${PROJECT_BINARY_DIR}
+    WORKING_DIRECTORY ${BUILD_DIR})
+
+# Package: all
+if(POLICY CMP0037)
+    cmake_policy(PUSH)
+    cmake_policy(SET CMP0037 OLD)
+endif()
+
+if(HIP_RUNTIME STREQUAL "rocclr")
+    set(package_list pkg_hip_base hip_on_rocclr pkg_hip_nvcc pkg_hip_doc pkg_hip_samples)
+    if(HIP_CATCH_TEST EQUAL "1")
+      set(package_list ${package_list} pkg_hip_catch_tests)
+    endif()
+    add_custom_target(package
+    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
+    DEPENDS ${package_list})
+endif()
+
+if(POLICY CMP0037)
+    cmake_policy(POP)
+endif()
 endif()
 
 #############################
diff --git a/packaging/CMakeLists.txt b/packaging/CMakeLists.txt
deleted file mode 100644
index ca368f9d..00000000
--- a/packaging/CMakeLists.txt
+++ /dev/null
@@ -1,297 +0,0 @@
-# Copyright (c) 2020 - 2022 Advanced Micro Devices, Inc. All rights reserved.
-#
-# Permission is hereby granted, free of charge, to any person obtaining a copy
-# of this software and associated documentation files (the "Software"), to deal
-# in the Software without restriction, including without limitation the rights
-# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-# copies of the Software, and to permit persons to whom the Software is
-# furnished to do so, subject to the following conditions:
-#
-# The above copyright notice and this permission notice shall be included in
-# all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
-# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-# THE SOFTWARE.
-
-cmake_minimum_required(VERSION 2.8.3)
-
-#set components for HIP
-if(HIP_CATCH_TEST EQUAL "1")
-   set(CPACK_COMPONENTS_ALL binary dev doc samples runtime-nvidia test)
-else()
-   set(CPACK_COMPONENTS_ALL binary dev doc samples runtime-nvidia)
-endif()
-
-###############Install Required files for all compnents########
-
-#Enable Component Install
-set(CPACK_RPM_COMPONENT_INSTALL ON)
-set(CPACK_DEB_COMPONENT_INSTALL ON)
-
-###Set License####
-set(CPACK_RESOURCE_FILE_LICENSE ${hip_SOURCE_DIR}/LICENSE.txt)
-install(FILES ${CPACK_RESOURCE_FILE_LICENSE} DESTINATION share/doc/${PROJECT_NAME} COMPONENT binary)
-set(CPACK_RPM_PACKAGE_LICENSE "MIT")
-
-#Begin binary files install
-if(HIP_PLATFORM STREQUAL "amd" )
-   if(BUILD_SHARED_LIBS)
-      install(FILES ${CMAKE_BINARY_DIR}/lib/libamdhip64.so DESTINATION lib COMPONENT binary)
-      install(FILES ${CMAKE_BINARY_DIR}/lib/libamdhip64.so.${HIP_LIB_VERSION_MAJOR} DESTINATION lib COMPONENT binary)
-      install(FILES ${CMAKE_BINARY_DIR}/lib/libamdhip64.so.${HIP_LIB_VERSION_STRING} DESTINATION lib COMPONENT binary)
-      if(__HIP_ENABLE_RTC)
-         install(FILES ${CMAKE_BINARY_DIR}/lib/libhiprtc-builtins.so DESTINATION lib COMPONENT binary)
-         install(FILES ${CMAKE_BINARY_DIR}/lib/libhiprtc-builtins.so.${HIP_LIB_VERSION_MAJOR} DESTINATION lib COMPONENT binary)
-         install(FILES ${CMAKE_BINARY_DIR}/lib/libhiprtc-builtins.so.${HIP_LIB_VERSION_STRING} DESTINATION lib COMPONENT binary)
-      endif()
-   else()
-      install(FILES ${CMAKE_BINARY_DIR}/lib/libamdhip64.a DESTINATION lib COMPONENT binary)
-   endif()#End BUILD_SHARED_LIBS
-
-#TODO:This do not belog in BINARY package.
-#Keeping it as is for now
-install(FILES ${CMAKE_BINARY_DIR}/.hipInfo DESTINATION lib COMPONENT binary)
-install(FILES ${CMAKE_BINARY_DIR}/hip-config.cmake ${CMAKE_BINARY_DIR}/hip-config-version.cmake DESTINATION lib/cmake/hip COMPONENT binary)
-install(FILES ${CMAKE_BINARY_DIR}/src/hip-lang-config.cmake ${CMAKE_BINARY_DIR}/src/hip-lang-config-version.cmake DESTINATION lib/cmake/hip-lang COMPONENT binary)
-## cmake generated target files contains IMPORTED_LOCATION_RELEASE etc. which
-## is installation path when building the project, which may be different from
-## the intallation path for packaging. These paths have to be replaced by
-## the package installation path, otherwise apps using pkg-config will fail.
-file(GLOB _target_files ${CONFIG_PACKAGE_INSTALL_DIR}/hip-targets*.cmake)
-foreach(_target_file ${_target_files})
-  execute_process(COMMAND sed -i s:${CMAKE_INSTALL_PREFIX}:${CPACK_INSTALL_PREFIX}:g ${_target_file})
-endforeach()
-install(FILES ${_target_files} DESTINATION lib/cmake/hip COMPONENT BINARY)
-
-file(GLOB _target_files ${CONFIG_LANG_PACKAGE_INSTALL_DIR}/hip-lang-targets*.cmake)
-foreach(_target_file ${_target_files})
-  execute_process(COMMAND sed -i s:{CMAKE_INSTALL_PREFIX}:${CPACK_INSTALL_PREFIX}:g ${_target_file})
-endforeach()
-install(FILES ${_target_files} DESTINATION lib/cmake/hip-lang COMPONENT BINARY)
-
-endif()#End HIP_PLATFORM = "amd"
-#End bianry files install
-
-#Begin dev files install
-if(WIN32)
-  install(DIRECTORY ${HIP_COMMON_DIR}/bin DESTINATION . COMPONENT dev
-          USE_SOURCE_PERMISSIONS)
-else()
-  install(DIRECTORY ${HIP_COMMON_DIR}/bin DESTINATION .  COMPONENT dev
-          USE_SOURCE_PERMISSIONS PATTERN *.bat EXCLUDE)
-endif()
-
-if (NOT ${HIPCC_BIN_DIR} STREQUAL "")
-  install(PROGRAMS ${HIPCC_BIN_DIR}/hipcc.bin DESTINATION bin)
-  install(PROGRAMS ${HIPCC_BIN_DIR}/hipconfig.bin DESTINATION bin)
-endif()
-
-install(DIRECTORY ${hip_SOURCE_DIR}/bin DESTINATION . COMPONENT dev
-        USE_SOURCE_PERMISSIONS)
-install(DIRECTORY ${HIP_COMMON_DIR}/include DESTINATION . COMPONENT dev)
-install(DIRECTORY ${hip_SOURCE_DIR}/include/hip/amd_detail
-        DESTINATION include/hip COMPONENT dev)
-install(DIRECTORY ${hip_SOURCE_DIR}/include/hip/nvidia_detail
-        DESTINATION include/hip COMPONENT dev)
-install(FILES ${CMAKE_BINARY_DIR}/include/hip/amd_detail/hip_prof_str.h
-        DESTINATION include/hip/amd_detail COMPONENT dev)
-install(FILES ${CMAKE_BINARY_DIR}/include/hip/hip_version.h
-        DESTINATION include/hip COMPONENT dev)
-install(FILES ${CMAKE_BINARY_DIR}/.hipVersion DESTINATION bin COMPONENT dev)
-install(DIRECTORY ${HIP_COMMON_DIR}/cmake DESTINATION . COMPONENT dev)
-#End dev files install
-
-#Begin doc files install
-find_program(DOXYGEN_EXE doxygen)
-if(DOXYGEN_EXE)
-    add_custom_target(build_doxygen ALL
-                  COMMAND HIP_PATH=${HIP_COMMON_DIR} doxygen ${HIP_COMMON_DIR}/docs/doxygen-input/doxy.cfg)
-    install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/RuntimeAPI/html
-            DESTINATION docs/RuntimeAPI COMPONENT doc)
-endif()
-#End doc files install
-
-#Begin samples files install
-install(DIRECTORY ${HIP_COMMON_DIR}/samples DESTINATION . COMPONENT samples)
-#End samples files install
-
-#Begin test files install
-if(HIP_CATCH_TEST EQUAL "1")
-install(DIRECTORY ${CMAKE_BINARY_DIR}/catch
-        DESTINATION . COMPONENT test
-        USE_SOURCE_PERMISSIONS)
-endif()
-#End test files install
-
-
-##################################
-# Packaging steps COMMON Variables
-##################################
-set(CPACK_SET_DESTDIR TRUE)
-
-set(CPACK_PACKAGE_VENDOR "Advanced Micro Devices, Inc.")
-set(CPACK_PACKAGE_CONTACT "HIP Support <hip.support@amd.com>")
-set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "HIP:Heterogenous-computing Interface for Portability")
-set(CPACK_PACKAGE_VERSION_MAJOR ${HIP_VERSION_MAJOR})
-set(CPACK_PACKAGE_VERSION_MINOR ${HIP_VERSION_MINOR})
-set(CPACK_PACKAGE_VERSION_PATCH ${HIP_VERSION_PATCH})
-set(CPACK_PACKAGE_VERSION ${HIP_VERSION_MAJOR}.${HIP_VERSION_MINOR}.${HIP_PACKAGING_VERSION_PATCH})
-set(CPACK_GENERATOR "TGZ:DEB;RPM" CACHE STRING "Package types to build")
-
-set(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION "/opt")
-if (CPACK_RPM_PACKAGE_RELEASE MATCHES "local" )
-  #If building locally default value will cause build failure
-  #DEBUG SYMBOL pacaking require SOURCE_DIR to be small
-  set(CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX ${CPACK_INSTALL_PREFIX})
-endif()
-set(CPACK_RPM_PACKAGE_AUTOREQPROV " no")
-set(CPACK_RPM_FILE_NAME "RPM-DEFAULT")
-
-set(CPACK_DEBIAN_FILE_NAME "DEB-DEFAULT")
-
-set(CPACK_SOURCE_GENERATOR "TGZ")
-
-
-#Begin Binary Packaging setting
-
-set(CPACK_BINARY_DEB "ON")
-set(CPACK_BINARY_RPM "ON")
-
-set(CPACK_DEBIAN_BINARY_PACKAGE_NAME "hip-runtime-amd")
-set(CPACK_RPM_BINARY_PACKAGE_NAME "hip-runtime-amd")
-
-set(CPACK_COMPONENT_BINARY_DESCRIPTION "HIP:Heterogenous-computing Interface for Portability [RUNTIME - AMD]")
-
-configure_file(hip-runtime-amd.postinst ${CMAKE_CURRENT_BINARY_DIR}/binary/postinst @ONLY)
-configure_file(hip-runtime-amd.prerm    ${CMAKE_CURRENT_BINARY_DIR}/binary/prerm @ONLY)
-
-set(CPACK_DEBIAN_BINARY_PACKAGE_CONTROL_EXTRA "${CMAKE_CURRENT_BINARY_DIR}/binary/postinst;${CMAKE_CURRENT_BINARY_DIR}/binary/prerm")
-set(CPACK_DEBIAN_BINARY_PACKAGE_DEPENDS "hsa-rocr-dev (>= 1.3), rocminfo,  comgr (>= 2.0), rocm-llvm, libc6, rocm-core")
-set(CPACK_DEBIAN_BINARY_PACKAGE_PROVIDES "hip-rocclr (= ${CPACK_PACKAGE_VERSION})")
-set(CPACK_DEBIAN_BINARY_PACKAGE_REPLACES "hip-rocclr (= ${CPACK_PACKAGE_VERSION})")
-
-set(CPACK_RPM_BINARY_PACKAGE_ARCHITECTURE "${CMAKE_SYSTEM_PROCESSOR}")
-set(CPACK_RPM_BINARY_POST_INSTALL_SCRIPT_FILE "${CMAKE_CURRENT_BINARY_DIR}/binary/postinst")
-set(CPACK_RPM_BINARY_PRE_UNINSTALL_SCRIPT_FILE "${CMAKE_CURRENT_BINARY_DIR}/binary/prerm")
-string(REPLACE "-" "_" HIP_BASE_VERSION ${CPACK_PACKAGE_VERSION})
-set(CPACK_RPM_BINARY_PACKAGE_REQUIRES "hsa-rocr-dev >= 1.3, rocminfo,  comgr >= 2.0, rocm-llvm, rocm-core")
-set(CPACK_RPM_BINARY_PACKAGE_PROVIDES "hip-rocclr = ${HIP_BASE_VERSION}")
-set(CPACK_RPM_BINARY_PACKAGE_OBSOLETES "hip-rocclr = ${HIP_BASE_VERSION}")
-#End Binary Packaging setting
-
-#Begin dev Packaging setting
-set(CPACK_DEV_DEB "ON")
-set(CPACK_DEV_RPM "ON")
-
-set(CPACK_DEBIAN_DEV_PACKAGE_NAME "hip-dev")
-set(CPACK_RPM_DEV_PACKAGE_NAME "hip-devel")
-
-set(CPACK_COMPONENT_DEV_DESCRIPTION "HIP: Heterogenous-computing Interface for Portability [DEVELOPMENT]")
-
-configure_file(hip-devel.postinst ${CMAKE_CURRENT_BINARY_DIR}/dev/postinst @ONLY)
-configure_file(hip-devel.prerm    ${CMAKE_CURRENT_BINARY_DIR}/dev/prerm @ONLY)
-set(CPACK_DEBIAN_DEV_PACKAGE_CONTROL_EXTRA "${CMAKE_CURRENT_BINARY_DIR}/dev/postinst;${CMAKE_CURRENT_BINARY_DIR}/dev/prerm")
-
-set(CPACK_DEBIAN_DEV_PACKAGE_DEPENDS "perl (>= 5.0), liburi-encode-perl, libfile-basedir-perl, libfile-copy-recursive-perl, libfile-listing-perl, libfile-which-perl, libc6, file, rocm-core")
-set(CPACK_DEBIAN_DEV_PACKAGE_PROVIDES "hip-base")
-set(CPACK_DEBIAN_DEV_PACKAGE_REPLACES "hip-base")
-
-set(CPACK_RPM_DEV_POST_INSTALL_SCRIPT_FILE "${CMAKE_CURRENT_BINARY_DIR}/dev/postinst")
-set(CPACK_RPM_DEV_PRE_UNINSTALL_SCRIPT_FILE "${CMAKE_CURRENT_BINARY_DIR}/dev/prerm")
-set(CPACK_RPM_DEV_PACKAGE_REQUIRES "perl >= 5.0, perl-File-Which, perl-File-Listing, perl-File-BaseDir, perl-URI-Encode, file, rocm-core")
-
-set(CPACK_RPM_DEV_PACKAGE_PROVIDES "hip-base")
-set(CPACK_RPM_DEV_PACKAGE_OBSOLETES "hip-base")
-#End dev Packaging setting
-
-#Begin test Packaging setting
-if(HIP_CATCH_TEST EQUAL "1")
-set(CPACK_TEST_DEB "ON")
-set(CPACK_TEST_RPM "ON")
-set(CPACK_DEBIAN_TEST_PACKAGE_NAME "hip-catch-tests")
-set(CPACK_RPM_TEST_PACKAGE_NAME "hip-catch-tests")
-set(CPACK_COMPONENT_TEST_DESCRIPTION "HIP: Heterogenous-computing Interface for Portability [TESTS]")
-
-set(CPACK_DEBIAN_TEST_PACKAGE_DEPENDS "hip-dev (= ${CPACK_PACKAGE_VERSION}-${CPACK_DEBIAN_PACKAGE_RELEASE}), rocm-core")
-set(CPACK_DEBIAN_TEST_PACKAGE_PROVIDES "hip-catch-tests")
-
-string(REPLACE "-" "_" HIP_BASE_VERSION ${CPACK_PACKAGE_VERSION})
-set(CPACK_RPM_TEST_PACKAGE_REQUIRES "hip-devel = ${HIP_BASE_VERSION}-${CPACK_RPM_PACKAGE_RELEASE}, rocm-core")
-endif()
-#End test Packaging setting
-
-#Begin doc Packaging setting
-set(CPACK_DOC_DEB "ON")
-set(CPACK_DOC_RPM "ON")
-set(CPACK_DEBIAN_DOC_PACKAGE_NAME "hip-doc")
-set(CPACK_RPM_DOC_PACKAGE_NAME "hip-doc")
-set(CPACK_COMPONENT_DOC_DESCRIPTION "HIP: Heterogenous-computing Interface for Portability [DOCUMENTATION]")
-
-set(CPACK_DEBIAN_DOC_PACKAGE_DEPENDS "hip-dev (= ${CPACK_PACKAGE_VERSION}-${CPACK_DEBIAN_PACKAGE_RELEASE}), rocm-core")
-set(CPACK_DEBIAN_DOC_PACKAGE_PROVIDES "hip-doc")
-
-string(REPLACE "-" "_" HIP_BASE_VERSION ${CPACK_PACKAGE_VERSION})
-set(CPACK_RPM_DOC_PACKAGE_REQUIRES "hip-devel = ${HIP_BASE_VERSION}-${CPACK_RPM_PACKAGE_RELEASE}, rocm-core")
-
-#End doc Packaging setting
-
-#Begin samples Packaging setting
-set(CPACK_SAMPLES_DEB "ON")
-set(CPACK_SAMPLES_RPM "ON")
-set(CPACK_DEBIAN_SAMPLES_PACKAGE_NAME "hip-samples")
-set(CPACK_RPM_SAMPLES_PACKAGE_NAME "hip-samples")
-set(CPACK_COMPONENT_SAMPLES_DESCRIPTION "HIP: Heterogenous-computing Interface for Portability [SAMPLES]")
-set(CPACK_DEBIAN_SAMPLES_PACKAGE_DEPENDS "hip-dev (= ${CPACK_PACKAGE_VERSION}-${CPACK_DEBIAN_PACKAGE_RELEASE}), rocm-core")
-set(CPACK_DEBIAN_SAMPLES_PACKAGE_PROVIDES "hip-samples")
-
-set(CPACK_RPM_SAMPLES_PACKAGE_REQUIRES "hip-devel = ${HIP_BASE_VERSION}-${CPACK_RPM_PACKAGE_RELEASE}, rocm-core")
-#End samples Packaging setting
-
-#Begin runtime-nvidia Packaging setting
-set(CPACK_RUNTIME-NVIDIA_DEB "ON")
-set(CPACK_RUNTIME-NVIDIA_RPM "ON")
-set(CPACK_DEBIAN_RUNTIME-NVIDIA_PACKAGE_NAME "hip-runtime-nvidia")
-set(CPACK_RPM_RUNTIME-NVIDIA_PACKAGE_NAME "hip-runtime-nvidia")
-set(CPACK_COMPONENT_RUNTIME-NVIDIA_DESCRIPTION "HIP: Heterogenous-computing Interface for Portability [RUNTIME-NVIDIA]")
-
-configure_file(hip-runtime-nvidia.postinst ${CMAKE_CURRENT_BINARY_DIR}/runtime-nvidia/postinst @ONLY)
-configure_file(hip-runtime-nvidia.prerm    ${CMAKE_CURRENT_BINARY_DIR}/runtime-nvidia/prerm @ONLY)
-set(CPACK_DEBIAN_RUNTIME-NVIDIA_PACKAGE_CONTROL_EXTRA "${CMAKE_CURRENT_BINARY_DIR}/runtime-nvidia/postinst;${CMAKE_CURRENT_BINARY_DIR}/runtime-nvidia/prerm")
-
-set(CPACK_DEBIAN_RUNTIME-NVIDIA_PACKAGE_DEPENDS "cuda (>= 7.5), rocm-core")
-set(CPACK_DEBIAN_RUNTIME-NVIDIA_PACKAGE_PROVIDES "hip-nvcc")
-set(CPACK_DEBIAN_RUNTIME-NVIDIA_PACKAGE_REPLACES "hip-nvcc")
-
-set(CPACK_RPM_RUNTIME-NVIDIA_POST_INSTALL_SCRIPT_FILE  "${CMAKE_CURRENT_BINARY_DIR}/runtime-nvidia/postinst")
-set(CPACK_RPM_RUNTIME-NVIDIA_PRE_UNINSTALL_SCRIPT_FILE "${CMAKE_CURRENT_BINARY_DIR}/runtime-nvidia/prerm")
-set(CPACK_RPM_RUNTIME-NVIDIA_PACKAGE_PROVIDES "hip-nvcc")
-set(CPACK_RPM_RUNTIME-NVIDIA_PACKAGE_OBSOLETES "hip-nvcc")
-set(CPACK_RPM_RUNTIME-NVIDIA_PACKAGE_REQUIRES "cuda >= 7.5, rocm-core")
-
-# Remove dependency on rocm-core if -DROCM_DEP_ROCMCORE=ON not given to cmake
-if(NOT ROCM_DEP_ROCMCORE)
-
-    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_RPM_BINARY_PACKAGE_REQUIRES ${CPACK_RPM_BINARY_PACKAGE_REQUIRES})
-    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_DEBIAN_BINARY_PACKAGE_DEPENDS ${CPACK_DEBIAN_BINARY_PACKAGE_DEPENDS})
-    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_RPM_DEV_PACKAGE_REQUIRES ${CPACK_RPM_DEV_PACKAGE_REQUIRES})
-    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_DEBIAN_DEV_PACKAGE_DEPENDS ${CPACK_DEBIAN_DEV_PACKAGE_DEPENDS})
-    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_RPM_DOC_PACKAGE_REQUIRES ${CPACK_RPM_DOC_PACKAGE_REQUIRES})
-    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_DEBIAN_DOC_PACKAGE_DEPENDS ${CPACK_DEBIAN_DOC_PACKAGE_DEPENDS})
-    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_RPM_SAMPLES_PACKAGE_REQUIRES ${CPACK_RPM_SAMPLES_PACKAGE_REQUIRES})
-    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_DEBIAN_SAMPLES_PACKAGE_DEPENDS ${CPACK_DEBIAN_SAMPLES_PACKAGE_DEPENDS})
-    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_RPM_RUNTIME-NVIDIA_PACKAGE_REQUIRES ${CPACK_RPM_RUNTIME-NVIDIA_PACKAGE_REQUIRES})
-    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_DEBIAN_RUNTIME-NVIDIA_PACKAGE_DEPENDS ${CPACK_DEBIAN_RUNTIME-NVIDIA_PACKAGE_DEPENDS})
-
-if(HIP_CATCH_TEST EQUAL "1") 
-    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_RPM_TEST_PACKAGE_REQUIRES ${CPACK_RPM_TEST_PACKAGE_REQUIRES})
-    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_DEBIAN_TEST_PACKAGE_DEPENDS ${CPACK_DEBIAN_TEST_PACKAGE_DEPENDS})
-endif()#HIPC_CATCH_TEST
-
-endif()
-
-include(CPack)
diff --git a/packaging/hip-devel.txt b/packaging/hip-devel.txt
new file mode 100644
index 00000000..04018d0c
--- /dev/null
+++ b/packaging/hip-devel.txt
@@ -0,0 +1,98 @@
+# Copyright (c) 2016 - 2021 Advanced Micro Devices, Inc. All rights reserved.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+# THE SOFTWARE.
+
+cmake_minimum_required(VERSION 3.16.8)
+project(hip_dev)
+
+if(WIN32)
+  install(DIRECTORY @HIP_COMMON_DIR@/bin DESTINATION . USE_SOURCE_PERMISSIONS)
+else()
+  install(DIRECTORY @HIP_COMMON_DIR@/bin DESTINATION . USE_SOURCE_PERMISSIONS
+          PATTERN *.bat EXCLUDE)
+endif()
+
+if (NOT @HIPCC_BIN_DIR@ STREQUAL "")
+  install(PROGRAMS @HIPCC_BIN_DIR@/hipcc.bin DESTINATION bin)
+  install(PROGRAMS @HIPCC_BIN_DIR@/hipconfig.bin DESTINATION bin)
+endif()
+
+install(DIRECTORY @hip_SOURCE_DIR@/bin DESTINATION . USE_SOURCE_PERMISSIONS)
+install(DIRECTORY @HIP_COMMON_DIR@/include DESTINATION .)
+install(DIRECTORY @hip_SOURCE_DIR@/include/hip/amd_detail DESTINATION include/hip)
+install(DIRECTORY @hip_SOURCE_DIR@/include/hip/nvidia_detail DESTINATION include/hip)
+install(FILES @PROJECT_BINARY_DIR@/include/hip/amd_detail/hip_prof_str.h
+        DESTINATION include/hip/amd_detail)
+install(FILES @PROJECT_BINARY_DIR@/include/hip/hip_version.h
+        DESTINATION include/hip)
+install(FILES @PROJECT_BINARY_DIR@/.hipVersion DESTINATION bin)
+install(DIRECTORY @HIP_COMMON_DIR@/cmake DESTINATION .)
+
+#############################
+# Packaging steps
+#############################
+set(CPACK_SET_DESTDIR TRUE)
+set(CPACK_INSTALL_PREFIX @CPACK_INSTALL_PREFIX@ )
+set(CPACK_PACKAGE_NAME "hip-dev")
+set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "HIP Heterogenous-computing Interface for Portability [DEVELOPMENT]")
+set(CPACK_PACKAGE_DESCRIPTION "HIP:
+      Heterogenous-computing Interface for Portability [DEVELOPMENT]")
+set(CPACK_PACKAGE_VENDOR "Advanced Micro Devices, Inc.")
+set(CPACK_PACKAGE_CONTACT "HIP Support <hip.support@amd.com>")
+set(CPACK_PACKAGE_VERSION_MAJOR @HIP_VERSION_MAJOR@)
+set(CPACK_PACKAGE_VERSION_MINOR @HIP_VERSION_MINOR@)
+set(CPACK_PACKAGE_VERSION_PATCH @HIP_PACKAGING_VERSION_PATCH@)
+set(CPACK_PACKAGE_VERSION @HIP_VERSION_MAJOR@.@HIP_VERSION_MINOR@.@HIP_PACKAGING_VERSION_PATCH@)
+set(CPACK_GENERATOR "TGZ;DEB;RPM")
+
+set(CPACK_BINARY_DEB "ON")
+set(CPACK_DEBIAN_PACKAGE_RELEASE @CPACK_DEBIAN_PACKAGE_RELEASE@)
+set(CPACK_DEBIAN_FILE_NAME "DEB-DEFAULT")
+set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${PROJECT_BINARY_DIR}/postinst;${PROJECT_BINARY_DIR}/prerm")
+set(CPACK_DEBIAN_PACKAGE_DEPENDS "perl (>= 5.0), liburi-encode-perl, libfile-basedir-perl, libfile-copy-recursive-perl, libfile-listing-perl, libfile-which-perl, libc6, file, rocm-core")
+set(CPACK_DEBIAN_PACKAGE_PROVIDES "hip-base")
+set(CPACK_DEBIAN_PACKAGE_REPLACES "hip-base")
+
+set(CPACK_BINARY_RPM "ON")
+set(CPACK_RPM_PACKAGE_RELEASE @CPACK_RPM_PACKAGE_RELEASE@)
+set(CPACK_RPM_PACKAGE_NAME "hip-devel")
+set(CPACK_RPM_FILE_NAME "RPM-DEFAULT")
+set(CPACK_RPM_PACKAGE_ARCHITECTURE "${CMAKE_SYSTEM_PROCESSOR}")
+set(CPACK_RPM_POST_INSTALL_SCRIPT_FILE "${PROJECT_BINARY_DIR}/postinst")
+set(CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE "${PROJECT_BINARY_DIR}/prerm")
+set(CPACK_RPM_PACKAGE_AUTOREQPROV " no")
+set(CPACK_RPM_PACKAGE_REQUIRES "perl >= 5.0, perl-File-Which, perl-File-Listing, perl-File-BaseDir, perl-URI-Encode, file, rocm-core")
+set(CPACK_RPM_PACKAGE_PROVIDES "hip-base")
+set(CPACK_RPM_PACKAGE_OBSOLETES "hip-base")
+set(CPACK_BINARY_RPM "ON")
+set(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION "/opt")
+set(CPACK_SOURCE_GENERATOR "TGZ")
+# Remove dependency on rocm-core if -DROCM_DEP_ROCMCORE=ON not given to cmake
+set(ROCM_DEP_ROCMCORE "@ROCM_DEP_ROCMCORE@")
+if(NOT ROCM_DEP_ROCMCORE)
+    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_RPM_PACKAGE_REQUIRES ${CPACK_RPM_PACKAGE_REQUIRES})
+    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_DEBIAN_PACKAGE_DEPENDS ${CPACK_DEBIAN_PACKAGE_DEPENDS})
+endif()
+
+set ( CPACK_RESOURCE_FILE_LICENSE "@hip_SOURCE_DIR@/LICENSE.txt" )
+# Install license file
+install(FILES ${CPACK_RESOURCE_FILE_LICENSE} DESTINATION share/doc/${CPACK_PACKAGE_NAME})
+set(CPACK_RPM_PACKAGE_LICENSE "MIT")
+
+include(CPack)
diff --git a/packaging/hip-doc.txt b/packaging/hip-doc.txt
new file mode 100644
index 00000000..262ec401
--- /dev/null
+++ b/packaging/hip-doc.txt
@@ -0,0 +1,87 @@
+# Copyright (c) 2016 - 2021 Advanced Micro Devices, Inc. All rights reserved.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+# THE SOFTWARE.
+
+cmake_minimum_required(VERSION 2.8.3)
+project(hip_doc)
+
+find_program(DOXYGEN_EXE doxygen)
+if(DOXYGEN_EXE)
+    add_custom_target(build_doxygen ALL
+                  COMMAND HIP_PATH=@HIP_COMMON_DIR@ doxygen @HIP_COMMON_DIR@/docs/doxygen-input/doxy.cfg)
+    install(DIRECTORY RuntimeAPI/html DESTINATION docs/docs/RuntimeAPI)
+endif()
+
+#find_program(GRIP_EXE grip)
+#if(GRIP_EXE)
+#    add_custom_target(convert_md_to_html ALL
+#                  COMMAND @hip_SOURCE_DIR@/packaging/convert_md_to_html.sh @hip_SOURCE_DIR@ ${PROJECT_BINARY_DIR}/md2html)
+#    install(DIRECTORY md2html/ DESTINATION docs)
+#endif()
+
+#############################
+# Packaging steps
+#############################
+set(CPACK_SET_DESTDIR TRUE)
+set(CPACK_INSTALL_PREFIX @CPACK_INSTALL_PREFIX@ )
+set(CPACK_PACKAGE_NAME "hip-doc")
+set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "HIP: Heterogenous-computing Interface for Portability [DOCUMENTATION]")
+set(CPACK_PACKAGE_DESCRIPTION "HIP:
+          Heterogenous-computing Interface for Portability [DOCUMENTATION]")
+set(CPACK_PACKAGE_VENDOR "Advanced Micro Devices, Inc.")
+set(CPACK_PACKAGE_CONTACT "HIP Support <hip.support@amd.com>")
+set(CPACK_PACKAGE_VERSION_MAJOR @HIP_VERSION_MAJOR@)
+set(CPACK_PACKAGE_VERSION_MINOR @HIP_VERSION_MINOR@)
+set(CPACK_PACKAGE_VERSION_PATCH @HIP_PACKAGING_VERSION_PATCH@)
+set(CPACK_PACKAGE_VERSION @HIP_VERSION_MAJOR@.@HIP_VERSION_MINOR@.@HIP_PACKAGING_VERSION_PATCH@)
+set(CPACK_GENERATOR "TGZ;DEB;RPM")
+
+set(CPACK_BINARY_DEB "ON")
+set(CPACK_DEBIAN_PACKAGE_RELEASE @CPACK_DEBIAN_PACKAGE_RELEASE@)
+set(CPACK_DEBIAN_FILE_NAME "DEB-DEFAULT")
+set(CPACK_DEBIAN_PACKAGE_DEPENDS "hip-dev (= ${CPACK_PACKAGE_VERSION}-${CPACK_DEBIAN_PACKAGE_RELEASE}), rocm-core")
+set(CPACK_DEBIAN_PACKAGE_PROVIDES "hip-doc")
+
+set(CPACK_BINARY_RPM "ON")
+set(CPACK_RPM_PACKAGE_RELEASE @CPACK_RPM_PACKAGE_RELEASE@)
+set(CPACK_RPM_FILE_NAME "RPM-DEFAULT")
+set(CPACK_RPM_PACKAGE_ARCHITECTURE "${CMAKE_SYSTEM_PROCESSOR}")
+set(CPACK_RPM_PACKAGE_AUTOREQPROV " no")
+string(REPLACE "-" "_" HIP_BASE_VERSION ${CPACK_PACKAGE_VERSION})
+set(CPACK_RPM_PACKAGE_REQUIRES "hip-devel = ${HIP_BASE_VERSION}-${CPACK_RPM_PACKAGE_RELEASE}, rocm-core")
+set(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION "/opt")
+set(CPACK_SOURCE_GENERATOR "TGZ")
+
+# Remove depenency on rocm-core if not wanted. Add a -DROCM_DEP_ROCMCORE=ON
+# to the cmake invocation. Do it this way so we can have the same code
+# in all the packages, and don't need to worry if we need commas or not
+# because there are other dependencies. Code is slightly fragile as we are
+# using regular expressions to edit strings.
+set(ROCM_DEP_ROCMCORE "@ROCM_DEP_ROCMCORE@")
+if(NOT ROCM_DEP_ROCMCORE)
+    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_RPM_PACKAGE_REQUIRES ${CPACK_RPM_PACKAGE_REQUIRES})
+    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_DEBIAN_PACKAGE_DEPENDS ${CPACK_DEBIAN_PACKAGE_DEPENDS})
+endif()
+
+set ( CPACK_RESOURCE_FILE_LICENSE "@hip_SOURCE_DIR@/LICENSE.txt" )
+# Install license file
+install(FILES ${CPACK_RESOURCE_FILE_LICENSE} DESTINATION share/doc/${CPACK_PACKAGE_NAME})
+set(CPACK_RPM_PACKAGE_LICENSE "MIT")
+
+include(CPack)
diff --git a/packaging/hip-runtime-amd.txt b/packaging/hip-runtime-amd.txt
new file mode 100644
index 00000000..6eea5694
--- /dev/null
+++ b/packaging/hip-runtime-amd.txt
@@ -0,0 +1,109 @@
+# Copyright (c) 2020 - 2021 Advanced Micro Devices, Inc. All rights reserved.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+# THE SOFTWARE.
+
+cmake_minimum_required(VERSION 2.8.3)
+project(hip_runtime_amd)
+
+if(@BUILD_SHARED_LIBS@)
+  install(FILES @PROJECT_BINARY_DIR@/lib/libamdhip64.so DESTINATION lib)
+  install(FILES @PROJECT_BINARY_DIR@/lib/libamdhip64.so.@HIP_LIB_VERSION_MAJOR@ DESTINATION lib)
+  install(FILES @PROJECT_BINARY_DIR@/lib/libamdhip64.so.@HIP_LIB_VERSION_STRING@ DESTINATION lib)
+  if(@__HIP_ENABLE_RTC@)
+    install(FILES @PROJECT_BINARY_DIR@/lib/libhiprtc-builtins.so DESTINATION lib)
+    install(FILES @PROJECT_BINARY_DIR@/lib/libhiprtc-builtins.so.@HIP_LIB_VERSION_MAJOR@ DESTINATION lib)
+    install(FILES @PROJECT_BINARY_DIR@/lib/libhiprtc-builtins.so.@HIP_LIB_VERSION_STRING@ DESTINATION lib)
+  endif()
+else()
+  install(FILES @PROJECT_BINARY_DIR@/lib/libamdhip64.a DESTINATION lib)
+endif()
+
+install(FILES @PROJECT_BINARY_DIR@/.hipInfo DESTINATION lib)
+install(FILES @PROJECT_BINARY_DIR@/hip-config.cmake @PROJECT_BINARY_DIR@/hip-config-version.cmake DESTINATION lib/cmake/hip)
+install(FILES @PROJECT_BINARY_DIR@/src/hip-lang-config.cmake @PROJECT_BINARY_DIR@/src/hip-lang-config-version.cmake DESTINATION lib/cmake/hip-lang)
+
+#############################
+# Packaging steps
+#############################
+set(CPACK_SET_DESTDIR TRUE)
+set(CPACK_INSTALL_PREFIX @CPACK_INSTALL_PREFIX@)
+
+## cmake generated target files contains IMPORTED_LOCATION_RELEASE etc. which
+## is installation path when building the project, which may be different from
+## the intallation path for packaging. These paths have to be replaced by
+## the package installation path, otherwise apps using pkg-config will fail.
+file(GLOB _target_files @CONFIG_PACKAGE_INSTALL_DIR@/hip-targets*.cmake)
+foreach(_target_file ${_target_files})
+  execute_process(COMMAND sed -i s:@CMAKE_INSTALL_PREFIX@:${CPACK_INSTALL_PREFIX}:g ${_target_file})
+endforeach()
+install(FILES ${_target_files} DESTINATION lib/cmake/hip)
+
+file(GLOB _target_files @CONFIG_LANG_PACKAGE_INSTALL_DIR@/hip-lang-targets*.cmake)
+foreach(_target_file ${_target_files})
+  execute_process(COMMAND sed -i s:@CMAKE_INSTALL_PREFIX@:${CPACK_INSTALL_PREFIX}:g ${_target_file})
+endforeach()
+install(FILES ${_target_files} DESTINATION lib/cmake/hip-lang)
+
+set(CPACK_PACKAGE_NAME "hip-runtime-amd")
+set(HCC_PACKAGE_NAME "rocclr")
+set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "HIP: Heterogenous-computing Interface for Portability [RUNTIME - AMD]")
+set(CPACK_PACKAGE_DESCRIPTION "HIP:
+      Heterogenous-computing Interface for Portability [RUNTIME - AMD]")
+set(CPACK_PACKAGE_VENDOR "Advanced Micro Devices, Inc.")
+set(CPACK_PACKAGE_CONTACT "HIP Support <hip.support@amd.com>")
+set(CPACK_PACKAGE_VERSION_MAJOR @HIP_VERSION_MAJOR@)
+set(CPACK_PACKAGE_VERSION_MINOR @HIP_VERSION_MINOR@)
+set(CPACK_PACKAGE_VERSION_PATCH @HIP_VERSION_PATCH@)
+set(CPACK_PACKAGE_VERSION @HIP_VERSION_MAJOR@.@HIP_VERSION_MINOR@.@HIP_PACKAGING_VERSION_PATCH@)
+set(CPACK_GENERATOR "TGZ;DEB;RPM")
+
+set(CPACK_BINARY_DEB "ON")
+set(CPACK_DEBIAN_PACKAGE_RELEASE @CPACK_DEBIAN_PACKAGE_RELEASE@)
+set(CPACK_DEBIAN_FILE_NAME "DEB-DEFAULT")
+set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${PROJECT_BINARY_DIR}/postinst;${PROJECT_BINARY_DIR}/prerm")
+set(CPACK_DEBIAN_PACKAGE_DEPENDS "hsa-rocr-dev (>= 1.3), rocminfo,  comgr (>= 2.0), rocm-llvm, libc6, rocm-core")
+set(CPACK_DEBIAN_PACKAGE_PROVIDES "hip-rocclr (= ${CPACK_PACKAGE_VERSION})")
+set(CPACK_DEBIAN_PACKAGE_REPLACES "hip-rocclr (= ${CPACK_PACKAGE_VERSION})")
+
+set(CPACK_BINARY_RPM "ON")
+set(CPACK_RPM_PACKAGE_RELEASE @CPACK_RPM_PACKAGE_RELEASE@)
+set(CPACK_RPM_FILE_NAME "RPM-DEFAULT")
+set(CPACK_RPM_PACKAGE_ARCHITECTURE "${CMAKE_SYSTEM_PROCESSOR}")
+set(CPACK_RPM_POST_INSTALL_SCRIPT_FILE "${PROJECT_BINARY_DIR}/postinst")
+set(CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE "${PROJECT_BINARY_DIR}/prerm")
+set(CPACK_RPM_PACKAGE_AUTOREQPROV " no")
+string(REPLACE "-" "_" HIP_BASE_VERSION ${CPACK_PACKAGE_VERSION})
+set(CPACK_RPM_PACKAGE_REQUIRES "hsa-rocr-dev >= 1.3, rocminfo,  comgr >= 2.0, rocm-llvm, rocm-core")
+set(CPACK_RPM_PACKAGE_PROVIDES "hip-rocclr = ${HIP_BASE_VERSION}")
+set(CPACK_RPM_PACKAGE_OBSOLETES "hip-rocclr = ${HIP_BASE_VERSION}")
+set(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION "/opt")
+set(CPACK_SOURCE_GENERATOR "TGZ")
+# Remove dependency on rocm-core if -DROCM_DEP_ROCMCORE=ON not given to cmake
+set(ROCM_DEP_ROCMCORE "@ROCM_DEP_ROCMCORE@")
+if(NOT ROCM_DEP_ROCMCORE)
+    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_RPM_PACKAGE_REQUIRES ${CPACK_RPM_PACKAGE_REQUIRES})
+    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_DEBIAN_PACKAGE_DEPENDS ${CPACK_DEBIAN_PACKAGE_DEPENDS})
+endif()
+
+set ( CPACK_RESOURCE_FILE_LICENSE "@hip_SOURCE_DIR@/LICENSE.txt" )
+# Install license file
+install(FILES ${CPACK_RESOURCE_FILE_LICENSE} DESTINATION share/doc/${CPACK_PACKAGE_NAME})
+set(CPACK_RPM_PACKAGE_LICENSE "MIT")
+
+include(CPack)
diff --git a/packaging/hip-runtime-nvidia.txt b/packaging/hip-runtime-nvidia.txt
new file mode 100644
index 00000000..3c7ea963
--- /dev/null
+++ b/packaging/hip-runtime-nvidia.txt
@@ -0,0 +1,74 @@
+# Copyright (c) 2016 - 2021 Advanced Micro Devices, Inc. All rights reserved.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+# THE SOFTWARE.
+
+cmake_minimum_required(VERSION 2.8.3)
+project(hip_runtime_nvidia)
+
+#############################
+# Packaging steps
+#############################
+set(CPACK_SET_DESTDIR TRUE)
+set(CPACK_INSTALL_PREFIX @CPACK_INSTALL_PREFIX@ )
+set(CPACK_PACKAGE_NAME "hip-runtime-nvidia")
+set(CPACK_PACKAGE_DESCRIPTION "HIP:
+          Heterogenous-computing Interface for Portability [RUNTIME - NVIDIA]")
+set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "HIP: Heterogenous-computing Interface for Portability [RUNTIME - NVIDIA]")
+set(CPACK_PACKAGE_VENDOR "Advanced Micro Devices, Inc.")
+set(CPACK_PACKAGE_CONTACT "HIP Support <hip.support@amd.com>")
+set(CPACK_PACKAGE_VERSION_MAJOR @HIP_VERSION_MAJOR@)
+set(CPACK_PACKAGE_VERSION_MINOR @HIP_VERSION_MINOR@)
+set(CPACK_PACKAGE_VERSION_PATCH @HIP_VERSION_PATCH@)
+set(CPACK_PACKAGE_VERSION @HIP_VERSION_MAJOR@.@HIP_VERSION_MINOR@.@HIP_PACKAGING_VERSION_PATCH@)
+set(CPACK_GENERATOR "TGZ;DEB;RPM")
+
+set(CPACK_BINARY_DEB "ON")
+set(CPACK_DEBIAN_PACKAGE_RELEASE @CPACK_DEBIAN_PACKAGE_RELEASE@)
+set(CPACK_DEBIAN_FILE_NAME "DEB-DEFAULT")
+set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${PROJECT_BINARY_DIR}/postinst;${PROJECT_BINARY_DIR}/prerm")
+set(CPACK_DEBIAN_PACKAGE_DEPENDS "cuda (>= 7.5), rocm-core")
+set(CPACK_DEBIAN_PACKAGE_PROVIDES "hip-nvcc")
+set(CPACK_DEBIAN_PACKAGE_REPLACES "hip-nvcc")
+
+set(CPACK_BINARY_RPM "ON")
+set(CPACK_RPM_PACKAGE_RELEASE @CPACK_RPM_PACKAGE_RELEASE@)
+set(CPACK_RPM_FILE_NAME "RPM-DEFAULT")
+set(CPACK_RPM_PACKAGE_ARCHITECTURE "${CMAKE_SYSTEM_PROCESSOR}")
+set(CPACK_RPM_POST_INSTALL_SCRIPT_FILE "${PROJECT_BINARY_DIR}/postinst")
+set(CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE "${PROJECT_BINARY_DIR}/prerm")
+set(CPACK_RPM_PACKAGE_AUTOREQPROV " no")
+string(REPLACE "-" "_" HIP_BASE_VERSION ${CPACK_PACKAGE_VERSION})
+set(CPACK_RPM_PACKAGE_PROVIDES "hip-nvcc")
+set(CPACK_RPM_PACKAGE_OBSOLETES "hip-nvcc")
+set(CPACK_RPM_PACKAGE_REQUIRES "cuda >= 7.5, rocm-core")
+set(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION "/opt")
+set(CPACK_SOURCE_GENERATOR "TGZ")
+# Remove dependency on rocm-core if -DROCM_DEP_ROCMCORE=ON not given to cmake
+set(ROCM_DEP_ROCMCORE "@ROCM_DEP_ROCMCORE@")
+if(NOT ROCM_DEP_ROCMCORE)
+    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_RPM_PACKAGE_REQUIRES ${CPACK_RPM_PACKAGE_REQUIRES})
+    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_DEBIAN_PACKAGE_DEPENDS ${CPACK_DEBIAN_PACKAGE_DEPENDS})
+endif()
+
+set ( CPACK_RESOURCE_FILE_LICENSE "@hip_SOURCE_DIR@/LICENSE.txt" )
+# Install license file
+install(FILES ${CPACK_RESOURCE_FILE_LICENSE} DESTINATION share/doc/${CPACK_PACKAGE_NAME})
+set(CPACK_RPM_PACKAGE_LICENSE "MIT")
+
+include(CPack)
diff --git a/packaging/hip-samples.txt b/packaging/hip-samples.txt
new file mode 100644
index 00000000..4ccac07b
--- /dev/null
+++ b/packaging/hip-samples.txt
@@ -0,0 +1,69 @@
+# Copyright (c) 2016 - 2021 Advanced Micro Devices, Inc. All rights reserved.
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+# THE SOFTWARE.
+
+cmake_minimum_required(VERSION 2.8.3)
+project(hip_samples)
+
+install(DIRECTORY @HIP_COMMON_DIR@/samples DESTINATION .)
+
+#############################
+# Packaging steps
+#############################
+set(CPACK_SET_DESTDIR TRUE)
+set(CPACK_INSTALL_PREFIX @CPACK_INSTALL_PREFIX@ )
+set(CPACK_PACKAGE_NAME "hip-samples")
+set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "HIP: Heterogenous-computing Interface for Portability [SAMPLES]")
+set(CPACK_PACKAGE_DESCRIPTION "HIP:
+          Heterogenous-computing Interface for Portability [SAMPLES]")
+set(CPACK_PACKAGE_VENDOR "Advanced Micro Devices, Inc.")
+set(CPACK_PACKAGE_CONTACT "HIP Support <hip.support@amd.com>")
+set(CPACK_PACKAGE_VERSION_MAJOR @HIP_VERSION_MAJOR@)
+set(CPACK_PACKAGE_VERSION_MINOR @HIP_VERSION_MINOR@)
+set(CPACK_PACKAGE_VERSION_PATCH @HIP_VERSION_PATCH@)
+set(CPACK_PACKAGE_VERSION @HIP_VERSION_MAJOR@.@HIP_VERSION_MINOR@.@HIP_PACKAGING_VERSION_PATCH@)
+set(CPACK_GENERATOR "TGZ;DEB;RPM")
+
+set(CPACK_BINARY_DEB "ON")
+set(CPACK_DEBIAN_PACKAGE_RELEASE @CPACK_DEBIAN_PACKAGE_RELEASE@)
+set(CPACK_DEBIAN_FILE_NAME "DEB-DEFAULT")
+set(CPACK_DEBIAN_PACKAGE_DEPENDS "hip-dev (= ${CPACK_PACKAGE_VERSION}-${CPACK_DEBIAN_PACKAGE_RELEASE}), rocm-core")
+set(CPACK_DEBIAN_PACKAGE_PROVIDES "hip-samples")
+
+set(CPACK_BINARY_RPM "ON")
+set(CPACK_RPM_PACKAGE_RELEASE @CPACK_RPM_PACKAGE_RELEASE@)
+set(CPACK_RPM_FILE_NAME "RPM-DEFAULT")
+set(CPACK_RPM_PACKAGE_ARCHITECTURE "${CMAKE_SYSTEM_PROCESSOR}")
+set(CPACK_RPM_PACKAGE_AUTOREQPROV " no")
+string(REPLACE "-" "_" HIP_BASE_VERSION ${CPACK_PACKAGE_VERSION})
+set(CPACK_RPM_PACKAGE_REQUIRES "hip-devel = ${HIP_BASE_VERSION}-${CPACK_RPM_PACKAGE_RELEASE}, rocm-core")
+set(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION "/opt")
+set(CPACK_SOURCE_GENERATOR "TGZ")
+# Remove dependency on rocm-core if -DROCM_DEP_ROCMCORE=ON not given to cmake
+set(ROCM_DEP_ROCMCORE "@ROCM_DEP_ROCMCORE@")
+if(NOT ROCM_DEP_ROCMCORE)
+    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_RPM_PACKAGE_REQUIRES ${CPACK_RPM_PACKAGE_REQUIRES})
+    string(REGEX REPLACE ",? ?rocm-core" "" CPACK_DEBIAN_PACKAGE_DEPENDS ${CPACK_DEBIAN_PACKAGE_DEPENDS})
+endif()
+
+set ( CPACK_RESOURCE_FILE_LICENSE "@hip_SOURCE_DIR@/LICENSE.txt" )
+# Install license file
+install(FILES ${CPACK_RESOURCE_FILE_LICENSE} DESTINATION share/doc/${CPACK_PACKAGE_NAME})
+set(CPACK_RPM_PACKAGE_LICENSE "MIT")
+include(CPack)
-- 
2.34.1

